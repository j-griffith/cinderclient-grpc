// Code generated by protoc-gen-go. DO NOT EDIT.
// source: attach.proto

package attacher

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AttachRequest struct {
	// The Cinder UUID of the volume being attached
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttachRequest) Reset()         { *m = AttachRequest{} }
func (m *AttachRequest) String() string { return proto.CompactTextString(m) }
func (*AttachRequest) ProtoMessage()    {}
func (*AttachRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_attach_cf7c1f720870dac8, []int{0}
}
func (m *AttachRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttachRequest.Unmarshal(m, b)
}
func (m *AttachRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttachRequest.Marshal(b, m, deterministic)
}
func (dst *AttachRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttachRequest.Merge(dst, src)
}
func (m *AttachRequest) XXX_Size() int {
	return xxx_messageInfo_AttachRequest.Size(m)
}
func (m *AttachRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttachRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttachRequest proto.InternalMessageInfo

func (m *AttachRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AttachResponse struct {
	// The attach response including device path, type and wwn
	// contents dependent on connection type
	PublishInfo          map[string]string `protobuf:"bytes,1,rep,name=publish_info,json=publishInfo,proto3" json:"publish_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AttachResponse) Reset()         { *m = AttachResponse{} }
func (m *AttachResponse) String() string { return proto.CompactTextString(m) }
func (*AttachResponse) ProtoMessage()    {}
func (*AttachResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_attach_cf7c1f720870dac8, []int{1}
}
func (m *AttachResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttachResponse.Unmarshal(m, b)
}
func (m *AttachResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttachResponse.Marshal(b, m, deterministic)
}
func (dst *AttachResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttachResponse.Merge(dst, src)
}
func (m *AttachResponse) XXX_Size() int {
	return xxx_messageInfo_AttachResponse.Size(m)
}
func (m *AttachResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttachResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttachResponse proto.InternalMessageInfo

func (m *AttachResponse) GetPublishInfo() map[string]string {
	if m != nil {
		return m.PublishInfo
	}
	return nil
}

type DetachRequest struct {
	// The Cinder UUID of the volume to detach
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DetachRequest) Reset()         { *m = DetachRequest{} }
func (m *DetachRequest) String() string { return proto.CompactTextString(m) }
func (*DetachRequest) ProtoMessage()    {}
func (*DetachRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_attach_cf7c1f720870dac8, []int{2}
}
func (m *DetachRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetachRequest.Unmarshal(m, b)
}
func (m *DetachRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetachRequest.Marshal(b, m, deterministic)
}
func (dst *DetachRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetachRequest.Merge(dst, src)
}
func (m *DetachRequest) XXX_Size() int {
	return xxx_messageInfo_DetachRequest.Size(m)
}
func (m *DetachRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DetachRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DetachRequest proto.InternalMessageInfo

func (m *DetachRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DetachResponse struct {
	// The status of the detach
	Ok                   string   `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DetachResponse) Reset()         { *m = DetachResponse{} }
func (m *DetachResponse) String() string { return proto.CompactTextString(m) }
func (*DetachResponse) ProtoMessage()    {}
func (*DetachResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_attach_cf7c1f720870dac8, []int{3}
}
func (m *DetachResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetachResponse.Unmarshal(m, b)
}
func (m *DetachResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetachResponse.Marshal(b, m, deterministic)
}
func (dst *DetachResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetachResponse.Merge(dst, src)
}
func (m *DetachResponse) XXX_Size() int {
	return xxx_messageInfo_DetachResponse.Size(m)
}
func (m *DetachResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DetachResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DetachResponse proto.InternalMessageInfo

func (m *DetachResponse) GetOk() string {
	if m != nil {
		return m.Ok
	}
	return ""
}

func init() {
	proto.RegisterType((*AttachRequest)(nil), "attacher.AttachRequest")
	proto.RegisterType((*AttachResponse)(nil), "attacher.AttachResponse")
	proto.RegisterMapType((map[string]string)(nil), "attacher.AttachResponse.PublishInfoEntry")
	proto.RegisterType((*DetachRequest)(nil), "attacher.DetachRequest")
	proto.RegisterType((*DetachResponse)(nil), "attacher.DetachResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AttacherClient is the client API for Attacher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttacherClient interface {
	Attach(ctx context.Context, in *AttachRequest, opts ...grpc.CallOption) (*AttachResponse, error)
	Detach(ctx context.Context, in *DetachRequest, opts ...grpc.CallOption) (*DetachResponse, error)
}

type attacherClient struct {
	cc *grpc.ClientConn
}

func NewAttacherClient(cc *grpc.ClientConn) AttacherClient {
	return &attacherClient{cc}
}

func (c *attacherClient) Attach(ctx context.Context, in *AttachRequest, opts ...grpc.CallOption) (*AttachResponse, error) {
	out := new(AttachResponse)
	err := c.cc.Invoke(ctx, "/attacher.Attacher/Attach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attacherClient) Detach(ctx context.Context, in *DetachRequest, opts ...grpc.CallOption) (*DetachResponse, error) {
	out := new(DetachResponse)
	err := c.cc.Invoke(ctx, "/attacher.Attacher/Detach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttacherServer is the server API for Attacher service.
type AttacherServer interface {
	Attach(context.Context, *AttachRequest) (*AttachResponse, error)
	Detach(context.Context, *DetachRequest) (*DetachResponse, error)
}

func RegisterAttacherServer(s *grpc.Server, srv AttacherServer) {
	s.RegisterService(&_Attacher_serviceDesc, srv)
}

func _Attacher_Attach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttacherServer).Attach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attacher.Attacher/Attach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttacherServer).Attach(ctx, req.(*AttachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attacher_Detach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttacherServer).Detach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attacher.Attacher/Detach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttacherServer).Detach(ctx, req.(*DetachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Attacher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "attacher.Attacher",
	HandlerType: (*AttacherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attach",
			Handler:    _Attacher_Attach_Handler,
		},
		{
			MethodName: "Detach",
			Handler:    _Attacher_Detach_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attach.proto",
}

func init() { proto.RegisterFile("attach.proto", fileDescriptor_attach_cf7c1f720870dac8) }

var fileDescriptor_attach_cf7c1f720870dac8 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2c, 0x29, 0x49,
	0x4c, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf0, 0x52, 0x8b, 0x94, 0xe4,
	0xb9, 0x78, 0x1d, 0xc1, 0xec, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x3e, 0x2e, 0xa6,
	0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0xa6, 0xcc, 0x14, 0xa5, 0x79, 0x8c, 0x5c,
	0x7c, 0x30, 0x15, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x3e, 0x5c, 0x3c, 0x05, 0xa5, 0x49,
	0x39, 0x99, 0xc5, 0x19, 0xf1, 0x99, 0x79, 0x69, 0xf9, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0xdc, 0x46,
	0x9a, 0x7a, 0x30, 0x43, 0xf5, 0x50, 0xd5, 0xeb, 0x05, 0x40, 0x14, 0x7b, 0xe6, 0xa5, 0xe5, 0xbb,
	0xe6, 0x95, 0x14, 0x55, 0x06, 0x71, 0x17, 0x20, 0x44, 0xa4, 0xec, 0xb8, 0x04, 0xd0, 0x15, 0x08,
	0x09, 0x70, 0x31, 0x67, 0xa7, 0x56, 0x42, 0x5d, 0x01, 0x62, 0x0a, 0x89, 0x70, 0xb1, 0x96, 0x25,
	0xe6, 0x94, 0xa6, 0x4a, 0x30, 0x81, 0xc5, 0x20, 0x1c, 0x2b, 0x26, 0x0b, 0x46, 0x90, 0x0f, 0x5c,
	0x52, 0xf1, 0xf9, 0x40, 0x81, 0x8b, 0x0f, 0xa6, 0x00, 0xea, 0x01, 0x3e, 0x2e, 0xa6, 0xfc, 0x6c,
	0x98, 0x8a, 0xfc, 0x6c, 0xa3, 0x0e, 0x46, 0x2e, 0x0e, 0x47, 0xa8, 0xe3, 0x85, 0x6c, 0xb9, 0xd8,
	0x20, 0x6c, 0x21, 0x71, 0x4c, 0x1f, 0x81, 0x6d, 0x90, 0x92, 0xc0, 0xe5, 0x55, 0x25, 0x06, 0x90,
	0x76, 0x88, 0x6d, 0xc8, 0xda, 0x51, 0x1c, 0x88, 0xac, 0x1d, 0xd5, 0x61, 0x4a, 0x0c, 0x49, 0x6c,
	0xe0, 0x08, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x42, 0xf0, 0xa2, 0x9b, 0xb0, 0x01, 0x00,
	0x00,
}
